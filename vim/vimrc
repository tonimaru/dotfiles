if 0 | finish | endif

set maxmempattern=2000
set updatetime=300

if has("nvim")
  tnoremap <silent> <ESC> <C-\><C-n>
  tnoremap <silent> <M-Left> <Esc>b
  tnoremap <silent> <M-Right> <Esc>f
  set inccommand=split
  let g:python3_host_prog = trim(system('which python3'))
  let g:perl_host_prog = trim(system('which perl'))
else
  function! s:pydll(cmd, optname)
    if !isdirectory($PYENV_ROOT) || !executable(a:cmd)
      return
    endif
    let l:ver=substitute(system(a:cmd . ' -c "import platform; print(platform.python_version())"'), '\n$', '', '')
    let l:dir=$PYENV_ROOT . '/versions/' . l:ver
    let l:dll=substitute(system('find "' . l:dir . '" -name "libpython*.dylib"'), '\n$', '', '')
    eval('let &' . a:optname . '=' . '"' . l:dll . '"')
  endfunction
  call s:pydll('python2', 'pythondll')
  call s:pydll('python3', 'pythonthreedll')
endif

if has('multi_byte')
  set encoding=utf-8
  set fileencoding=utf-8
  set fileencodings=utf-8,euc-jp,cp932
  set ambiwidth=double
endif

scriptencoding utf-8

augroup my_vimrc
  autocmd!
augroup END
command! -bang -nargs=* Au autocmd<bang> my_vimrc <args>

command! Cd cd %:p:h

function! s:uuid()
  let uuid = system('uuidgen | tr "[A-Z]" "[a-z]" | tr -d "\n"')
  exe "normal! i" . uuid . "\<Esc>"
endfunction
command! UUID call s:uuid()

function! s:init_cmdwin()
  nnoremap <buffer><silent><nowait> <ESC> <C-w>c
  vnoremap <buffer><silent><nowait> <ESC> <C-w>c
  nnoremap <buffer><silent><nowait> q <C-w>c
  vnoremap <buffer><silent><nowait> q <C-w>c
  startinsert!
endfunction
Au CmdwinEnter * call s:init_cmdwin()
Au FileType help noremap <buffer><nowait> q <C-w>c
Au WinEnter * checktime
if has('nvim')
  Au TermOpen * startinsert
endif
function! s:CleanNoNameEmptyBuffers()
    let buffers = filter(range(1, bufnr('$')), 'buflisted(v:val) && empty(bufname(v:val)) && bufwinnr(v:val) < 0 && (getbufline(v:val, 1, "$") == [""]) && getbufinfo(v:val)[0].changed == 0')
    if !empty(buffers)
        silent exe 'bd '.join(buffers, ' ')
    endif
endfunction
Au CursorHold * call s:CleanNoNameEmptyBuffers()
Au BufEnter * silent! if isdirectory(expand('%:p:h')) | silent! lcd %:p:h | endif

let s:is_mswin = has('win95') || has('win16') || has('win32') || has('win64')

function! s:mkdir(path)
  if !isdirectory(a:path)
    silent execute s:is_mswin ? '!md' : '!mkdir -p' a:path
  endif
endfunction

let s:vimfiles_name = s:is_mswin ? 'vimfiles' : '.vim'
let s:vimfiles = expand(printf('%s/%s', $HOME, s:vimfiles_name))

function! s:vimdir(dir)
  return expand(printf('%s/%s', s:vimfiles, a:dir))
endfunction

set swapfile
let s:swap_dir = s:vimdir('swap')
call s:mkdir(s:swap_dir)
execute printf('set directory=%s', s:swap_dir)

set backup
let s:backup_dir = s:vimdir('backup')
call s:mkdir(s:backup_dir)
execute printf('set backupdir=%s', s:backup_dir)

if has('persistent_undo')
  set undofile
  let s:undo_dir = s:vimdir('undo')
  call s:mkdir(s:undo_dir)
  execute printf('set undodir=%s', s:undo_dir)
endif

set number
set signcolumn=number

set nowrap

set hidden

set keywordprg=

set list
set listchars=eol:â†´,tab:>-,trail:_,extends:>,precedes:>

set tabstop=2 shiftwidth=2 softtabstop=2
set expandtab smarttab
set autoindent

set ignorecase smartcase

set laststatus=2

set backspace=indent,eol,start

set foldlevel=100

set diffopt+=vertical,algorithm:histogram,indent-heuristic

execute printf('set verbosefile=%s', s:vimdir('verbosefile'))

if has('extra_search')
  set incsearch
  if has('vim_starting')
    set hlsearch
  endif
endif

if has('insert_expand')
  set completeopt-=preview,longest,noselect,noinsert
endif

if has('matchfuzzy')
  set completeopt+=matchfuzzy
endif

if has('smartindent')
  set smartindent
endif

if exists('+imdisable')
  set imdisable
endif

if has('multi_lang')
  set helplang=ja,en
endif

if exists('+clipboard')
  set clipboard=unnamed
  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

if exists('+fixendofline')
  set nofixendofline
endif

if exists('+cindent')
  set cinoptions+=t0
endif

set formatoptions-=o

set synmaxcol=2000

set iskeyword-=.
set iskeyword-=#
set iskeyword-=-

set conceallevel=0

nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

nnoremap <silent> <Esc><Esc> :nohlsearch<CR>

nmap <Space> [prefix]
nnoremap [prefix] <Nop>

nnoremap <silent> [prefix]ee <Cmd>e $MYVIMRC<CR>
nnoremap <silent> [prefix]er <Cmd>so $MYVIMRC<CR>

nnoremap <silent> <C-t> <C-w>n<Cmd>ter<CR>

inoremap <expr> <C-g> pumvisible() ? "\<C-n>" : "\<C-g>"
inoremap <expr> <C-t> pumvisible() ? "\<C-p>" : "\<C-t>"

" http://nanabit.net/blog/2009/07/04/vim-replace-motion/
" https://github.com/kana/vim-operator-replace
function! s:operator_replace(type)
  let sel_save = &selection
  let p_save = &paste
  let &selection = 'inclusive'
  set paste

  let reg = v:register !=# '' ? v:register : '"'
  if a:type =~# '\v\C^[vV]$'
    execute printf('normal! `<%s`>"_c%s%s', a:type, "\<C-r>", reg)
  else
    execute printf('normal! `[v`]"_c%s%s', "\<C-r>", reg)
  endif

  let &paste = p_save
  let &selection = sel_save
endfunction
nnoremap <silent> s <Cmd>set opfunc=<SID>operator_replace<CR>g@
xnoremap <silent> s :call <SID>operator_replace(visualmode())<CR>

nmap [prefix]i [insert]
nnoremap [insert] <Nop>

nnoremap [insert]d a<C-r>=strftime('%F')<CR>
nnoremap [insert]u <Cmd>UUID<CR>

nmap [prefix]l [lang]
nnoremap [lang] <Nop>

function! Root_dir()
  let l:gitroot = system('git rev-parse --show-toplevel')
  if v:shell_error == 0
    return l:gitroot
  endif
  return expand('%:p:h')
endfunction

function! Terminal_exec(cmd, ...) abort
  silent! write
  let l:args = substitute(join(a:000), '\s\+$', '', '')
  if has('nvim')
      let l:cmd = 'terminal'
  elseif has('terminal')
      let l:cmd = 'terminal ++curwin'
  else
      let l:cmd = '!'
  endif
  noautocmd new
  execute l:cmd 'set' '-x' '&&' a:cmd l:args
endfunction

execute 'source' s:vimdir('plugins_main.vim')

runtime macros/matchit.vim

syntax on
set background=dark

if !has('gui_running')
  if $COLORTERM ==# 'gnome-terminal'
    set t_Co=256
  endif
  if (has('nvim') || has('termguicolors')) && $COLORTERM ==# 'truecolor'
    set termguicolors
  endif
endif

function! s:col()
  let l:has_codedark = !empty(globpath(&runtimepath, expand('colors/codedark.vim')))
  if (!s:is_mswin || has('gui_running')) && l:has_codedark
    colorscheme codedark
    return
  endif
endfunction
call s:col()

if !has('vim_starting') && exists(':IndentLinesReset')
  IndentLinesReset
endif

let s:local_vimrc = s:vimdir('local_vimrc')
silent! execute 'source' s:local_vimrc
execute 'nnoremap' '[prefix]el' ':e' s:local_vimrc.'<CR>'

highlight LineNr guifg=grey guibg=black
