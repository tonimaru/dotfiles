[[plugins]]
repo = 'Shougo/vinarise.vim'

[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
  let g:translate_popup_window=0
  xnoremap t <Cmd>Translate<CR>
'''

[[plugins]]
repo = 'thinca/vim-prettyprint'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap [prefix]q <Cmd>QuickRun<CR>

  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['_'] = {}
  if has('nvim')
    let g:quickrun_config['_']['runner'] = 'neovim_job'
  elseif exists('*ch_close_in')
    let g:quickrun_config['_']['runner'] = 'job'
    let g:quickrun_config['_']['runner/job/interval'] = 33
  endif

  let g:quickrun_config['json'] = {'type': executable('jq') ? 'json/jq' : executable('json2yaml') ? 'json/json2yaml' : ''}
  let g:quickrun_config['json/jq'] = {'command': 'jq', 'exec': 'cat %s | %c "%o"', 'cmdopt': '.', 'outputter/buffer/filetype': 'json'}
  let g:quickrun_config['json/json2yaml'] = {'command': 'json2yaml', 'exec': '%c %s', 'outputter/buffer/filetype': 'yaml'}

  let g:quickrun_config['yaml'] = {'type': executable('yaml2json') ? 'yaml/yaml2json' : ''}
  let g:quickrun_config['yaml/yaml2json'] = {'command': 'yaml2json', 'exec': '%c %s', 'outputter/buffer/filetype': 'json'}
'''

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'
if = "has('nvim')"
on_source = 'vim-quickrun'

[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
  let g:ref_man_cmd='man'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = [
  'OpenBrowser',
  'OpenBrowserSearch',
  'OpenBrowserSmartSearch',
]

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = [
  'open-browser.vim',
]
on_cmd = [
  'OpenGithubFile',
  'OpenGithubIssue',
  'OpenGithubProject',
  'OpenGithubCommit',
  'OpenGithubPullReq',
]

[[plugins]]
repo = 'CoderCookE/vim-chatgpt'
on_cmd = [
  'Ask',
  'Rewrite',
  'Review',
  'Document',
  'Explain',
  'Test',
  'Fix',
]
hook_add = '''
  let g:chat_gpt_lang = 'Japanese'
  let g:chat_gpt_model='gpt-4o-mini'
'''

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

[[plugins]]
repo = 'epwalsh/obsidian.nvim'
if = "has('nvim')"
depends = ['plenary.nvim', 'telescope.nvim']
on_cmd = [
  'ObsidianOpen',
  'ObsidianNew',
  'ObsidianQuickSwitch',
  'ObsidianFollowLink',
  'ObsidianBacklinks',
  'ObsidianTags',
  'ObsidianToday',
  'ObsidianYesterday',
  'ObsidianTomorrow',
  'ObsidianDailies',
  'ObsidianTemplate',
  'ObsidianSearch',
  'ObsidianLink',
  'ObsidianLinkNew',
  'ObsidianLinks',
  'ObsidianExtractNote',
  'ObsidianWorkspace',
  'ObsidianPasteImg',
  'ObsidianRename',
  'ObsidianToggleCheckbox',
  'ObsidianNewFromTemplate',
  'ObsidianTOC',
]
hook_add = '''
  nnoremap <silent> [prefix]mb <Cmd>ObsidianBacklinks<CR>
  nnoremap <silent> [prefix]md <Cmd>ObsidianDailies<CR>
  nnoremap <silent> [prefix]mm <Cmd>ObsidianNew<CR>
  nnoremap <silent> [prefix]mo <Cmd>ObsidianToday<CR>
  nnoremap <silent> [prefix]ms <Cmd>ObsidianSearch<CR>
  nnoremap <silent> [prefix]mt <Cmd>ObsidianTags<CR>
  nnoremap <silent> [prefix]J <Cmd>ObsidianQuickSwitch<CR>
  nnoremap <silent> [prefix]M <Cmd>ObsidianToday<CR>
'''
lua_source = '''
  print("source")
  if vim.fn.isdirectory(vim.fn.expand('~/vaults/default')) == 0 then
      print("mkdir")
      vim.fn.mkdir(vim.fn.expand('~/vaults/default'), 'p')
  end
  require("obsidian").setup({
    workspaces = {
      {
        name = "default",
        path = "~/vaults/default",
      },
    },
    notes_subdir = "notes",
    daily_notes = {
      folder = "notes/dailies",
    },
    note_path_func = function(spec)
      return spec.dir / tostring(spec.id)
    end,
    callbacks = {
      enter_note = function(client, note)
        vim.api.nvim_buf_set_keymap(note.bufnr, 'n', 'gb', "<Cmd>ObsidianBacklinks<CR>", { noremap = true, silent = true})
        vim.api.nvim_buf_set_keymap(note.bufnr, 'n', 'gr', "<Cmd>ObsidianSearch<CR>", { noremap = true, silent = true})
      end,
    },
    ui = {
      enable = false,
    },
  })
'''
