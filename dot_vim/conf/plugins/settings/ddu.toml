[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
hook_add = '''
  nnoremap <silent> [prefix]b <Cmd>call ddu#start(#{sources: [#{name: 'buffer'}]})<CR>
  nnoremap <silent> [prefix]u <Cmd>call ddu#start(#{sources: [#{name: 'mr'}]})<CR>
  nnoremap <silent> [prefix]w <Cmd>call ddu#start(#{sources: [#{name: 'mr', params: #{kind: 'mrw'}}]})<CR>
  nnoremap <silent> [prefix]j <Cmd>call ddu#start(#{sources: [#{name: 'junkfile'}]})<CR>

  nnoremap <silent> [prefix]df <Cmd>call ddu#start(#{sources: [#{name: 'file'}], ui: 'filer'})<CR>
  nnoremap <silent> [prefix]dl <Cmd>call ddu#start(#{sources: [#{name: 'line'}], uiParams: #{ff: #{winCol: &columns / 4, autoAction: #{}}}})<CR>
  nnoremap <silent> [prefix]dgs <Cmd>call ddu#start(#{sources: [#{name: 'git_stash'}]})<CR>

  if executable('rg')
      nnoremap <silent> gr <Cmd>call ddu#start(#{
          \   sources: [#{name: 'rg', options: #{matchers: []}}],
          \   sourceParams: #{rg: #{args: ['-i', '--column', '--no-heading', '--color', 'never']}},
          \ })<CR>
  endif

  if executable('ghq')
      let ghq_root = trim(system('ghq root'))
      nnoremap <silent> gq <Cmd>call ddu#start(#{
          \   sources: [#{name: 'file_external'}],
          \   sourceOptions: #{file_external: #{path: ghq_root}},
          \   sourceParams: #{file_external: #{cmd: ['ghq', 'list', '-p']}},
          \   kindOptions: #{file: #{defaultAction: 'cd'}},
          \   uiParams: #{ff: #{autoAction: #{}}},
          \ })<CR>
  endif

  if executable('chezmoi')
      let chezmoi_src_path = trim(system('chezmoi source-path'))
      nnoremap <silent> gh <Cmd>call ddu#start(#{
          \   sources: [#{name: 'file_external'}],
          \   sourceOptions: #{file_external: #{path: chezmoi_src_path}},
          \   sourceParams: #{
          \     file_external: #{
          \       cmd: executable('fd')
          \         ? ['fd', '.', '-t', 'f', '-H', '-E', '.git', chezmoi_src_path]
          \         : ['find', chezmoi_src_path, '-type', 'f', '-a', '-not', '-path', '*/.git/*'],
          \     },
          \   },
          \ })<CR>
  endif
'''
hook_source = '''
  call ddu#custom#patch_global(#{
      \   ui: 'ff',
      \   sourceOptions: #{
      \     _: #{
      \       matchers: ['matcher_fzf'],
      \     },
      \     junkfile: #{
      \       volatile: v:true,
      \     },
      \     rg: #{
      \       volatile: v:true,
      \     },
      \     file: #{
      \       matchers: ['matcher_hidden'],
      \       columns: ['filename'],
      \     },
      \     mr: #{
      \       matchers: ['matcher_zf'],
      \       sorters: ['sorter_zf'],
      \       converters: ['converter_zf'],
      \     },
      \     file_external: #{
      \       matchers: ['matcher_zf'],
      \       sorters: ['sorter_zf'],
      \       converters: ['converter_zf'],
      \     },
      \   },
      \   kindOptions: #{
      \     file: { 'defaultAction': 'open' },
      \     action: { 'defaultAction': 'do' },
      \   },
      \   uiParams: #{
      \     ff: #{
      \       autoAction: #{name: 'preview'},
      \     },
      \     filer: #{
      \       split: 'no',
      \       sort: 'filename',
      \     },
      \   },
      \   filterParams: #{
      \     converter_zf: #{
      \       highlight: 'Search',
      \     },
      \   },
      \ })
  if has('nvim')
    call ddu#custom#patch_global(#{
        \   uiParams: #{
        \     ff: #{
        \       split: 'floating',
        \       floatingBorder: 'single',
        \       winRow: -1,
        \       winCol: -1,
        \       winHeight: &lines - 5,
        \       startAutoAction: v:true,
        \       previewFloating: v:true,
        \       previewFloatingBorder: 'single',
        \       previewSplit: 'vertical',
        \       previewWidth: &columns / 2 - 2,
        \       previewHeight: &lines - 5,
        \       filterFloatingPosition: 'bottom',
        \     },
        \   },
        \ })
  endif
  call ddu#custom#action('kind', 'file', 'filer', { args -> OpenFiler(args) })
  function! OpenFiler(args)
    const path = a:args.items[0].action.path
    const directory = isdirectory(path) ? path : fnamemodify(path, ':h')
    call ddu#start(#{sources: [#{name: 'file', options: #{path: directory}}], ui: 'filer'})
  endfunction
'''

# source

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'peacock0803sz/ddu-source-git_stash'
on_source = 'ddu.vim'

# filter

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'hasundue/ddu-filter-zf'
on_source = 'ddu.vim'
extAttrs.installerBuild = 'deno task fetch'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

# kind

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

# column

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

# ui

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
  nnoremap <buffer> <CR> <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer> a <Cmd>call ddu#ui#do_action('chooseAction')<CR>
  nnoremap <buffer> i <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
  nnoremap <buffer> p <Cmd>call ddu#ui#do_action('preview')<CR>
  nnoremap <buffer> q <Cmd>call ddu#ui#do_action('quit')<CR>
  nnoremap <buffer> * <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
  nnoremap <buffer> ; <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> r <Cmd>call ddu#ui#do_action('itemAction', #{name: 'quickfix'})<CR>
  nnoremap <buffer> d <Nop>
  nnoremap <buffer> dd <Cmd>call ddu#ui#do_action('itemAction', #{name: 'delete'})<CR>
'''
ddu-ff-filter = '''
  inoremap <buffer> <CR> <Esc><Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> <CR> <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> q <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> <nowait> <Esc> <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
hook_source = '''
  autocmd my_vimrc BufEnter ddu-filer-filer call ddu#ui#do_action('checkItems')
'''
[plugins.ftplugin]
ddu-filer = '''
  function! ToggleHidden(name) abort
    let cur = ddu#custom#get_current(b:ddu_ui_name)
    let matchers = cur
        \ ->get('sourceOptions', {})
        \ ->get(a:name, {})
        \ ->get('matchers', [])
    let foundIdx = matchers->index('matcher_hidden')
    if foundIdx >= 0
        call remove(matchers, foundIdx)
    else 
        call add(matchers, 'matcher_hidden')
    endif
    let sources = cur->get('sources', [])
    for source in sources
        if source.name == a:name
            let opts = source->get('options', {})
            call extend(opts, #{matchers: matchers})
        endif
    endfor
    call ddu#ui#do_action('updateOptions', #{
        \   sourceOptions: { a:name: #{ matchers: matchers } },
        \   sources: sources,
        \ })
  endfunction
  nnoremap <silent><buffer> . <Cmd>call ToggleHidden('file')<CR>
  nnoremap <silent><buffer> c <Cmd>call ddu#ui#do_action('itemAction', #{name: 'copy'})<CR>
  nnoremap <silent><buffer> m <Cmd>call ddu#ui#do_action('itemAction', #{name: 'move'})<CR>
  nnoremap <silent><buffer> p <Cmd>call ddu#ui#do_action('itemAction', #{name: 'paste'})<CR>
  nnoremap <silent><buffer> h <Cmd>call ddu#ui#do_action('itemAction', #{name: 'narrow', params: #{path: '..'}})<CR>
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> l ddu#ui#get_item()->get('isTree', v:false) ?
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'narrow'})<CR>" : 
        \ "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'open'})<CR>"
  nnoremap <silent><buffer><expr> <CR> ddu#ui#filer#get_item().kind == 'file' ?
        \ ddu#ui#get_item()->get('isTree', v:false) ?
        \   "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'narrow'})<CR>" : 
        \   "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'open'})<CR>" :
        \ "<Cmd>call ddu#ui#do_action('itemAction')<CR>"
  nnoremap <silent><buffer> w <Cmd>call ddu#ui#do_action('itemAction', #{name: 'open', params: #{command: 'split'}})<CR>
  nnoremap <silent><buffer> t <Cmd>call ddu#ui#do_action('itemAction', #{name: 'open', params: #{command: 'tabnew'}})<CR>
  nnoremap <nowait><silent><buffer> d <Cmd>call ddu#ui#do_action('itemAction', #{name: 'trash' })<CR>
  nnoremap <silent><buffer> D <Cmd>call ddu#ui#do_action('itemAction', #{name: 'newDirectory'})<CR>
  nnoremap <silent><buffer> F <Cmd>call ddu#ui#do_action('itemAction', #{name: 'newFile'})<CR>
  nnoremap <silent><buffer> r <Cmd>call ddu#ui#do_action('itemAction', #{name: 'rename'})<CR>
  nnoremap <silent><buffer> ~ <Cmd>call ddu#ui#do_action('itemAction', #{name: 'narrow', params: #{path: $HOME}})<CR>
  nnoremap <silent><buffer> \ <Cmd>call ddu#ui#do_action('itemAction', #{name: 'narrow', params: #{path: '/'}})<CR>
  nnoremap <silent><buffer> - <Cmd>call ddu#ui#do_action('expandItem', #{mode: 'toggle'})<CR>
  nnoremap <silent><buffer> q <Cmd>call ddu#ui#do_action('quit')<CR>
  nnoremap <silent><buffer> Q <Cmd>bp\|bd #<CR>
  nnoremap <silent><buffer> * <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
  nnoremap <silent><buffer> ; <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
  nnoremap <silent><buffer> <C-l> <Cmd>call ddu#ui#do_action('checkItems')<CR>
  nnoremap <silent><buffer> y <Cmd>call ddu#ui#do_action('itemAction', #{name: 'yank'})<CR>
  nnoremap <silent><buffer> a <Cmd>call ddu#ui#do_action('chooseAction')<CR>
'''
