[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
hook_add = '''
  nnoremap <silent> [prefix]b <Cmd>call ddu#start(#{sources: [#{name: 'buffer'}]})<CR>
  nnoremap <silent> [prefix]u <Cmd>call ddu#start(#{sources: [#{name: 'mr'}]})<CR>
  nnoremap <silent> [prefix]w <Cmd>call ddu#start(#{sources: [#{name: 'mr', params: #{kind: 'mrw'}}]})<CR>
  nnoremap <silent> [prefix]j <Cmd>call ddu#start(#{sources: [#{name: 'junkfile'}]})<CR>

  nnoremap <silent> [prefix]dl <Cmd>call ddu#start(#{sources: [#{name: 'line'}], uiParams: #{ff: #{autoAction: #{}}}})<CR>
  nnoremap <silent> [prefix]dgs <Cmd>call ddu#start(#{sources: [#{name: 'git_stash'}]})<CR>

  nnoremap <silent> [prefix]dp <Cmd>call ddu#start(#{
      \   sources: ['item'],
      \   sourceParams : #{
      \     item: #{
      \       items: map(values(dpp#_plugins), {k, v -> #{word: v.path, kind: 'file', action: #{path: v.path, isDirectory: v:true}}}),
      \     },
      \   },
      \   kindOptions: #{file: #{defaultAction: 'cd'}},
      \   uiParams: #{ff: #{autoAction: #{}}},
      \ })<CR>

  if executable('rg')
      nnoremap <silent> gr <Cmd>call ddu#start(#{
          \   sources: [#{name: 'rg', options: #{matchers: [], volatile: v:true}}],
          \   sourceParams: #{rg: #{args: ['-i', '--column', '--no-heading', '--color', 'never']}},
          \ })<CR>
  endif

  if executable('ghq')
      let ghq_root = trim(system('ghq root'))
      nnoremap <silent> gq <Cmd>call ddu#start(#{
          \   sources: [#{name: 'file_external'}],
          \   sourceOptions: #{file_external: #{path: ghq_root}},
          \   sourceParams: #{file_external: #{cmd: ['ghq', 'list', '-p']}},
          \   kindOptions: #{file: #{defaultAction: 'cd'}},
          \   uiParams: #{ff: #{autoAction: #{}}},
          \ })<CR>
  endif

  if executable('chezmoi')
      let chezmoi_src_path = trim(system('chezmoi source-path'))
      nnoremap <silent> gh <Cmd>call ddu#start(#{
          \   sources: [#{name: 'file_external'}],
          \   sourceOptions: #{file_external: #{path: chezmoi_src_path}},
          \   sourceParams: #{
          \     file_external: #{
          \       cmd: executable('fd')
          \         ? ['fd', '.', '-t', 'f', '-H', '-E', '.git', chezmoi_src_path]
          \         : ['find', chezmoi_src_path, '-type', 'f', '-a', '-not', '-path', '*/.git/*'],
          \     },
          \   },
          \ })<CR>
  endif
'''
hook_source = '''
  call ddu#custom#patch_global(#{
      \   ui: 'ff',
      \   sourceOptions: #{
      \     _: #{
      \       matchers: ['matcher_fzf'],
      \     },
      \     junkfile: #{
      \       volatile: v:true,
      \     },
      \     rg: #{
      \       volatile: v:true,
      \     },
      \     file: #{
      \       matchers: ['matcher_hidden', 'matcher_zf'],
      \       sorters: ['sorter_zf'],
      \       converters: ['converter_zf'],
      \       columns: ['filename'],
      \     },
      \     mr: #{
      \       matchers: ['matcher_zf'],
      \       sorters: ['sorter_zf'],
      \       converters: ['converter_zf'],
      \     },
      \     file_external: #{
      \       matchers: ['matcher_zf'],
      \       sorters: ['sorter_zf'],
      \       converters: ['converter_zf'],
      \     },
      \   },
      \   kindOptions: #{
      \     file: #{ defaultAction: 'open' },
      \     action: #{ defaultAction: 'do' },
      \     lsp: #{ defaultAction: 'open' },
      \   },
      \   actionOptions: #{
      \     narrow: #{
      \       quit: v:false,
      \     },
      \     open: #{
      \       quit: v:true,
      \     },
      \   },
      \   actionParams: #{
      \     open: #{
      \       command: 'drop',
      \     },
      \   },
      \   uiParams: #{
      \     ff: #{
      \       split: 'tab',
      \       autoAction: #{name: 'preview'},
      \       startAutoAction: v:true,
      \       previewSplit: 'vertical',
      \     },
      \     filer: #{
      \       displayRoot: v:true,
      \       split: 'no',
      \       sort: 'filename',
      \       sortTreesFirst: v:true,
      \       statusline: v:false,
      \     },
      \   },
      \   filterParams: #{
      \     converter_zf: #{
      \       highlight: 'Search',
      \     },
      \   },
      \ })
'''

# source

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-item'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'
on_source = 'ddu.vim'

[[plugins]]
repo = 'peacock0803sz/ddu-source-git_stash'
on_source = 'ddu.vim'

[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
on_source = 'ddu.vim'

# filter

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'hasundue/ddu-filter-zf'
on_source = 'ddu.vim'
extAttrs.installerBuild = 'deno task fetch'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

# kind

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

# column

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

# ui

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
  nnoremap <buffer> <CR> <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer> a <Cmd>call ddu#ui#do_action('chooseAction')<CR>
  nnoremap <buffer> i <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
  nnoremap <buffer> p <Cmd>call ddu#ui#do_action('preview')<CR>
  nnoremap <buffer> q <Cmd>call ddu#ui#do_action('quit')<CR>
  nnoremap <buffer> * <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
  nnoremap <buffer> ; <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> r <Cmd>call ddu#ui#do_action('itemAction', #{name: 'quickfix'})<CR>
  nnoremap <buffer> d <Nop>
  nnoremap <buffer> dd <Cmd>call ddu#ui#do_action('itemAction', #{name: 'delete'})<CR>
'''
ddu-ff-filter = '''
  inoremap <buffer> <CR> <Esc><Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> <CR> <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> q <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> <nowait> <Esc> <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
'''
