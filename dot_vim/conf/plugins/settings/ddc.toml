[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim', 'vim-vsnip']
on_event = ['InsertEnter']
hook_add = '''
  function! CommandlinePre() abort
    cnoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y> <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e> <Cmd>call pum#map#cancel()<CR>
    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>
  endfunction
  nnoremap : <Cmd>call CommandlinePre()<CR>:
  inoremap <expr> <C-x><C-o> ddc#map#manual_complete()
'''
hook_post_source = '''
  call ddc#custom#patch_global('ui', 'pum')
  call ddc#custom#patch_global('sources', ['file', 'vsnip', 'around'])
  call ddc#custom#patch_global('backspaceCompletion', v:true)
  call ddc#custom#patch_global('autoCompleteDelay', 66)
  call ddc#custom#patch_global('sourceOptions', {
      \   '_': {
      \     'ignoreCase': v:true,
      \     'matchers': ['matcher_vimregexp'],
      \   },
      \   'file': {
      \     'mark': 'file',
      \     'isVolatile': v:true,
      \     'forceCompletionPattern': '\S/\S*',
      \   },
      \   'around': {
      \     'mark': 'around',
      \     'maxItems': 3,
      \   },
      \   'cmdline': {
      \     'mark': 'cmdline',
      \   },
      \   'input': {
      \     'mark': 'input',
      \     'isVolatile': v:true,
      \   },
      \   'line': {
      \     'mark': 'line',
      \   },
      \   'lsp': {
      \     'mark': 'lsp',
      \     'isVolatile': v:true,
      \     'forceCompletionPattern': '\.\w*|:\w*|->\w*|\\\w*',
      \     'minAutoCompleteLength': 0,
      \     'dup': 'keep',
      \     'matchers': ['matcher_fuzzy'],
      \     'sorters': ['sorter_fuzzy'],
      \     'converters': ['converter_fuzzy'],
      \   },
      \   'vsnip': {
      \     'mark': 'vsnip',
      \     'maxItems': 10,
      \     'dup': 'keep',
      \     'minAutoCompleteLength': 1,
      \   },
      \ })

  call ddc#custom#patch_global('sourceParams', {
    \   'lsp': {
    \     'lspEngine': 'nvim-lsp',
    \     'snippetEngine': denops#callback#register({ body -> vsnip#anonymous(body) }),
    \     'enableResolveItem': v:true,
    \     'enableAdditionalTextEdit': v:true,
    \     'confirmBehavior': 'replace',
    \   },
    \   'line': {
    \     'maxSize': 1000,
    \   },
    \ })

  call ddc#custom#patch_global('cmdlineSources', {
      \   ':': ['cmdline', 'around'],
      \   '@': ['input', 'file', 'around'],
      \   '>': ['input', 'file', 'around'],
      \   '/': ['around', 'line'],
      \   '?': ['around', 'line'],
      \   '-': ['around', 'line'],
      \   '=': ['input'],
      \ })

  call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
      \ ])

  if has('nvim')
    call ddc#custom#patch_filetype([
      \   'bash',
      \   'dockerfile',
      \   'go',
      \   'json',
      \   'lua',
      \   'markdown',
      \   'rust',
      \   'sh',
      \   'sql',
      \   'typescript',
      \   'typescriptreact',
      \   'vim',
      \   'yaml',
      \ ], 'sources', [
      \   'lsp',
      \   'file',
      \   'vsnip',
      \   'around',
      \ ])
  endif

  call ddc#enable()
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
merged = false

[[plugins]]
repo = 'sdras/vue-vscode-snippets'
merged = false

[[plugins]]
repo = 'nametake/vim-goiferr-snippets'
merged = false

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
depends = [
  'friendly-snippets',
  'vue-vscode-snippets',
]
hook_source = '''
  let g:vsnip_snippet_dirs = get(g:, 'vsnip_snippet_dirs', []) + globpath(&runtimepath, 'snippets', 1, 1)
  let g:vsnip_snippet_dirs = get(g:, 'vsnip_snippet_dirs', []) + globpath(&runtimepath, 'snippets/javascript', 1, 1)
  let g:vsnip_snippet_dirs = get(g:, 'vsnip_snippet_dirs', []) + globpath(&runtimepath, 'snippets/vue', 1, 1)
  let g:vsnip_filetypes = {
    \   'typescript': ['javascript', 'typescript'],
    \ }
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
  inoremap <C-n> <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p> <Cmd>call pum#map#select_relative(-1)<CR>

  imap <expr> <C-j>
    \ exists("*pum#entered") && pum#entered() ? '<Cmd>call pum#map#confirm()<CR>' :
    \ exists("*vsnip#expandable") && vsnip#expandable() ? '<Plug>(vsnip-expand)' :
    \ '<C-j>'

  imap <expr> <C-l>
    \ exists("*pum#entered") && pum#entered() ? '<Cmd>call pum#map#confirm()<CR>' :
    \ exists("*vsnip#expandable") && vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' :
    \ '<C-l>'

  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-l> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<C-l>'
  smap <expr> <C-h> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-h>'
'''

# source

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-git'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'
on_source = 'ddc-source-lsp'
lua_source = '''
  require('ddc_source_lsp_setup').setup()
'''

# matcher

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_vimregexp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# ui

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'
