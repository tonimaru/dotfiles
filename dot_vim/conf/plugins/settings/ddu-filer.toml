[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
hook_add = '''
  function! StartDduFiler(opt)
    let winids = ddu#ui#winids(a:opt.name)
    if !empty(winids)
        call win_gotoid(winids[0])
        return
    endif
    if a:opt->get("resume", v:false)
        let path = ddu#get_context("filer1")->get('path', '')
        if path != ''
            let so = a:opt->get('sourceOptions', {})
            let so['file'] = #{ path: path }
            let a:opt.sourceOptions = so
        endif
    endif
    call ddu#start(a:opt)
  endfunction
  nnoremap <silent> [prefix]f <Cmd>call StartDduFiler(#{name: "filer1", sources: [#{name: 'file'}], ui: 'filer', resume: v:true})<CR>
  nnoremap <silent> [prefix]F <Cmd>call StartDduFiler(#{name: "filer2", sources: [#{name: 'file'}], ui: 'filer', uiOptions: #{toggle: v:true}})<CR>

  function! ToggleHidden(name) abort
    let cur = ddu#custom#get_current(b:ddu_ui_name)
    let matchers = cur
        \ ->get('sourceOptions', {})
        \ ->get(a:name, {})
        \ ->get('matchers', [])
    let foundIdx = matchers->index('matcher_hidden')
    if foundIdx >= 0
        call remove(matchers, foundIdx)
    else 
        call add(matchers, 'matcher_hidden')
    endif
    call ddu#ui#do_action('updateOptions', #{
        \   sourceOptions: { a:name: #{ matchers: matchers } },
        \ })
    call ddu#redraw(cur.name, #{method: "refreshItems"})
  endfunction
  function! Narrow(path = '')
    if get(ddu#ui#get_item(), '__expanded', v:true) && a:path == ''
      return
    endif
    let args = #{name: 'narrow'}
    if a:path != ''
        let args['params'] = #{path: a:path}
    endif
    call ddu#ui#sync_action('itemAction', args)
    let cur = ddu#custom#get_current(b:ddu_ui_name)
    let dir = cur
        \ ->get('sourceOptions', {})
        \ ->get('file', {})
        \ ->get('path', '')
    if dir != ''
        execute 'lcd' dir
    endif
  endfunction
'''
hook_source = '''
  autocmd my_vimrc TabEnter,WinEnter,CursorHold,FocusGained ddu-filer-* call ddu#ui#do_action('checkItems')

  function! OpenFiler(args)
    const path = a:args.items[0].action.path
    const directory = isdirectory(path) ? path : fnamemodify(path, ':h')
    call StartDduFiler(#{sources: [#{name: 'file', options: #{path: directory}}], ui: 'filer'})
  endfunction
  call ddu#custom#action('kind', 'file', 'filer', { args -> OpenFiler(args) })
'''
[plugins.ftplugin]
ddu-filer = '''
  nnoremap <silent><buffer> . <Cmd>call ToggleHidden('file')<CR>
  nnoremap <silent><buffer> c <Cmd>call ddu#ui#do_action('itemAction', #{name: 'copy'})<CR>
  nnoremap <silent><buffer> m <Cmd>call ddu#ui#do_action('itemAction', #{name: 'move'})<CR>
  nnoremap <silent><buffer> p <Cmd>call ddu#ui#do_action('itemAction', #{name: 'paste'})<CR>
  nnoremap <silent><buffer> h <Cmd>call Narrow('..')<CR>
  nnoremap <silent><buffer> j <Cmd>call ddu#ui#do_action('cursorNext', #{loop: v:true})<CR>
  nnoremap <silent><buffer> k <Cmd>call ddu#ui#do_action('cursorPrevious', #{loop: v:true})<CR>
  nnoremap <silent><buffer><expr> l
        \ ddu#ui#get_item().kind == 'file' ?
        \   ddu#ui#get_item()->get('action', {})->get('isDirectory', v:false) ?
        \     ddu#ui#get_item()->get('__expanded', v:true) ?
        \         "j" :
        \         "<Cmd>call Narrow()<CR>" :
        \     "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'open', params: #{ command: 'drop' }})<CR>" :
        \   "<Cmd>call ddu#ui#do_action('itemAction')<CR>"
  nnoremap <silent><buffer><expr> <CR>
        \ ddu#ui#get_item().kind == 'file' ?
        \   ddu#ui#get_item()->get('action', {})->get('isDirectory', v:false) ?
        \     ddu#ui#get_item()->get('__expanded', v:true) ?
        \         "j" :
        \         "<Cmd>call Narrow()<CR>" :
        \     "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'open', params: #{ command: 'drop' }})<CR>" :
        \   "<Cmd>call ddu#ui#do_action('itemAction')<CR>"
  nnoremap <silent><buffer><expr> w
        \ ddu#ui#get_item().kind == 'file' ?
        \   ddu#ui#get_item()->get('action', {})->get('isDirectory', v:false) ?
        \     "" :
        \     "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'open', params: #{ command: 'split' }})<CR>" :
        \   "<Cmd>call ddu#ui#do_action('itemAction')<CR>"
  nnoremap <silent><buffer><expr> t
        \ ddu#ui#get_item().kind == 'file' ?
        \   ddu#ui#get_item()->get('action', {})->get('isDirectory', v:false) ?
        \     "" :
        \     "<Cmd>call ddu#ui#do_action('itemAction', #{name: 'open', params: #{ command: 'tabnew' }})<CR>" :
        \   "<Cmd>call ddu#ui#do_action('itemAction')<CR>"
  nnoremap <nowait><silent><buffer> d <Cmd>call ddu#ui#do_action('itemAction', #{name: 'trash' })<CR>
  nnoremap <silent><buffer> D <Cmd>call ddu#ui#do_action('itemAction', #{name: 'newDirectory'})<CR>
  nnoremap <silent><buffer> F <Cmd>call ddu#ui#do_action('itemAction', #{name: 'newFile'})<CR>
  nnoremap <silent><buffer> r <Cmd>call ddu#ui#do_action('itemAction', #{name: 'rename'})<CR>
  nnoremap <silent><buffer> ~ <Cmd>call Narrow($HOME)<CR>
  nnoremap <silent><buffer> \ <Cmd>call Narrow('/')<CR>
  nnoremap <silent><buffer> o <Cmd>call ddu#ui#do_action('expandItem', #{mode: 'toggle'})<CR>
  nnoremap <silent><buffer> q <Cmd>call ddu#ui#do_action('quit')<CR>
  nnoremap <silent><buffer> * <Cmd>call ddu#ui#do_action('toggleAllItems')<CR>
  nnoremap <silent><buffer> ; <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
  nnoremap <silent><buffer> <C-l> <Cmd>call ddu#ui#do_action('redraw')<CR>
  nnoremap <silent><buffer> y <Cmd>call ddu#ui#do_action('itemAction', #{name: 'yank'})<CR>
  nnoremap <silent><buffer> a <Cmd>call ddu#ui#do_action('chooseAction')<CR>
  nnoremap <silent><buffer> i <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
'''
