if 0 | finish | endif

if has('multi_byte')
  set encoding=utf-8
  set fileencoding=utf-8
  set fileencodings=utf-8,euc-jp,cp932
  set ambiwidth=double
endif

scriptencoding utf-8

if has('autocmd')
  augroup my_vimrc
    autocmd!
  augroup END
  command! -bang -nargs=* Au autocmd<bang> my_vimrc <args>
else
  command! -bang -nargs=* Au
endif

function! s:init_cmdwin()
  nnoremap <buffer><silent><nowait> <ESC> <C-w>c
  vnoremap <buffer><silent><nowait> <ESC> <C-w>c
  nnoremap <buffer><silent><nowait> q <C-w>c
  vnoremap <buffer><silent><nowait> q <C-w>c
  startinsert!
endfunction
Au CmdwinEnter * call s:init_cmdwin()
Au FileType help noremap <buffer><nowait> q <C-w>c
Au FileType javascript,coffee set tabstop=2 shiftwidth=2
Au WinEnter * checktime

let s:is_mswin = has('win95') || has('win16') || has('win32') || has('win64')

function! s:mkdir(path)
  if !isdirectory(a:path)
    silent execute s:is_mswin ? '!md' : '!mkdir -p' a:path
  endif
endfunction

let s:vimfiles_name = s:is_mswin ? 'vimfiles' : '.vim'
let s:vimfiles = expand(printf('%s/%s', $HOME, s:vimfiles_name))

function! s:vimdir(dir)
  return expand(printf('%s/%s', s:vimfiles, a:dir))
endfunction

set swapfile
let s:swap_dir = s:vimdir('swap')
call s:mkdir(s:swap_dir)
execute printf('set directory=%s', s:swap_dir)

set backup
let s:backup_dir = s:vimdir('backup')
call s:mkdir(s:backup_dir)
execute printf('set backupdir=%s', s:backup_dir)

if has('persistent_undo')
  set undofile
  let s:undo_dir = s:vimdir('undo')
  call s:mkdir(s:undo_dir)
  execute printf('set undodir=%s', s:undo_dir)
endif

set number

set nowrap

set hidden

set keywordprg=

set list
set listchars=eol:$,tab:>-,trail:_,extends:>,precedes:>

set tabstop=2 shiftwidth=2 softtabstop=2
set expandtab smarttab
set autoindent

set ignorecase smartcase

set laststatus=2

set backspace=indent,eol,start

set foldlevel=100

set diffopt+=vertical

execute printf('set verbosefile=%s', s:vimdir('verbosefile'))

if has('extra_search')
  set incsearch
  if has('vim_starting')
    set hlsearch
  endif
endif

if has('insert_expand')
  set completeopt-=preview
  if has('patch-7.4.775')
    set completeopt+=noselect,noinsert
  endif
endif

if has('smartindent')
  set smartindent
endif

if exists('+imdisable')
  set imdisable
endif

if has('multi_lang')
  set helplang=ja,en
endif

if exists('+clipboard')
  set clipboard=unnamed
  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

if exists('+fixendofline')
  set nofixendofline
endif

if exists('+cindent')
  set cinoptions+=t0
endif

set synmaxcol=310

nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

nnoremap <silent> <Esc><Esc> :nohlsearch<CR>

map <Space> [prefix]
noremap [prefix] <Nop>

nnoremap <silent> [prefix]ee :<C-u>e $MYVIMRC<CR>
nnoremap <silent> [prefix]er :<C-u>so $MYVIMRC<CR>

" http://nanabit.net/blog/2009/07/04/vim-replace-motion/
" https://github.com/kana/vim-operator-replace
function! s:operator_replace(type)
  let sel_save = &selection
  let p_save = &paste
  let &selection = 'inclusive'
  set paste

  let reg = v:register !=# '' ? v:register : '"'
  if a:type =~# '\v\C^[vV]$'
    execute printf('normal! `<%s`>"_c%s%s', a:type, "\<C-r>", reg)
  else
    execute printf('normal! `[v`]"_c%s%s', "\<C-r>", reg)
  endif

  let &paste = p_save
  let &selection = sel_save
endfunction
nnoremap <silent> s :<C-u>set opfunc=<SID>operator_replace<CR>g@
vnoremap <silent> s :<C-u>call <SID>operator_replace(visualmode())<CR>

let s:plugins = s:vimdir('plugins.vim')
silent! execute 'source' s:plugins
execute 'nnoremap' '[prefix]ep' ':e' s:plugins.'<CR>'

runtime macros/matchit.vim

syntax on
set background=dark

if !has('gui_running')
  if $COLORTERM ==# 'gnome-terminal'
    set t_Co=256
  endif
endif

if !empty(globpath(&runtimepath, expand('colors/solarized.vim')))
  if !has('gui_running')
    let g:solarized_termcolors=&t_Co
  endif
  colorscheme solarized
endif

if !has('vim_starting') && exists(':IndentLinesReset')
  IndentLinesReset
endif

highlight VimrcKeywordHighlight term=bold ctermfg=224 guifg=#ffd4c9
highlight VimrcKeywordHighlightBold term=bold cterm=bold ctermfg=224 gui=bold guifg=#ffd4c9

let g:hier_highlight_group_qf  = 'qf_error_ucurl'
let g:hier_highlight_group_qfw = 'qf_warning_ucurl'

highlight qf_error_ucurl term=bold ctermfg=White ctermbg=Red gui=undercurl guisp=Red
highlight qf_warning_ucurl term=bold ctermfg=Black ctermbg=Yellow gui=undercurl guisp=Yellow

highlight DiffAdd term=bold ctermfg=Green ctermbg=DarkGreen guifg=Green
highlight DiffChange term=bold ctermfg=Blue ctermbg=DarkBlue guifg=Blue
highlight DiffDelete term=bold ctermfg=Magenta ctermbg=DarkRed guifg=Red
highlight DiffText term=bold ctermfg=Cyan ctermbg=DarkCyan guifg=White

let s:local_vimrc = s:vimdir('local_vimrc')
silent! execute 'source' s:local_vimrc
execute 'nnoremap' '[prefix]el' ':e' s:local_vimrc.'<CR>'

